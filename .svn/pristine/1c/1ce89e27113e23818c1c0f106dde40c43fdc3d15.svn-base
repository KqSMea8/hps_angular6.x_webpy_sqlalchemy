export const utils = {
    transformRequest: function (params: object): string {
        /**
        *@methon transformRequest
        *@desc 序列化对象
        *@param params: object
        *@return string
        **/
        const arr = [];
        Object.keys(params).forEach(key => {
            let value = params[key];
            if (Object.prototype.toString.call(value) === '[object Object]') {
                value = JSON.stringify(value);
            }
            arr.push(this.encodeUriQuery(key) + '=' + this.encodeUriQuery(value));
        });
        return arr.join('&');
    },
    encodeUriQuery: function (val: string, pctEncodeSpaces: string): any {
        /**
        *@methon encodeUriQuery
        *@desc 编码数据
        *@param val: string 需编码参数
        *@param pctEncodeSpaces: string
        *@return any
        **/
        return encodeURIComponent(val).
            replace(/%40/gi, '@').
            replace(/%3A/gi, ':').
            replace(/%24/g, '$').
            replace(/%2C/gi, ',').
            replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
    },
    fnGetCookie: function (c_name: string): any {
        if (document.cookie.length > 0) {
            let c_start = document.cookie.indexOf(c_name + '=');
            if (c_start !== -1) {
                c_start = c_start + c_name.length + 1;
                let c_end = document.cookie.indexOf(';', c_start);
                if (c_end === -1) {
                    c_end = document.cookie.length;
                }
                return unescape(document.cookie.substring(c_start, c_end));
            } else {
                return null;
            }
        }
        return null;
    },
    fnCheckCookie: function (c_name: string): boolean {
        const userInfo = this.fnGetCookie(c_name);
        console.log('userInfo=' + userInfo);
        if (userInfo !== null) {
            return true;
        } else {
            return false;
        }
    },
    fnSetCookie: function (c_name: string, value: string, expiredays: number): void {
        const exdate = new Date();
        exdate.setDate(exdate.getDate() + expiredays);
        document.cookie = c_name + '=' + escape(value) +
            ((expiredays == null) ? '' : ';expires=' + exdate.toUTCString);
    }
};
