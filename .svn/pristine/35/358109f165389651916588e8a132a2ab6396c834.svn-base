import { Check } from './../../../../class/check';
import { User } from './../../../../class/user';
import { ContextService } from 'src/app/services/context.service';
import { FuncRole } from './../../../../class/funcRole';
import { UpdataRoleCondition } from './../../../../class/updataRoleCondition';
import { Component, OnInit } from "@angular/core";
import { Subtab } from "src/app/class/sidebar";
import { SystemManagementService } from "src/app/services/system-management.service";
import { ApiService } from "src/app/services/api.service";
import { RemoveUserCondition } from "src/app/class/removeUserCondition";
import { NzMessageService, NzModalService } from "ng-zorro-antd";
import { UpdateUserCondition } from "src/app/class/updateUserCondition";
import { SearchCondition } from 'src/app/class/searchCondition';
import { SearchUserCondition } from 'src/app/class/searchUserCondition';

@Component({
    selector: "app-user-info",
    templateUrl: "./user-info.component.html",
    styleUrls: ["./user-info.component.less"]
})
export class UserInfoComponent implements OnInit {

    m_nBtnState: number = 0;
    m_isVisible: boolean = false;
    m_nVisible: number = 0;
    m_nUserID: number = 0;
    m_nMustUserID: number = 0;
    m_sUserName: string;
    m_sNewPassword: string;
    m_sFuncRoleList: string;
    m_sDataRoleList: string;
    m_isEditVisible: boolean = false;
    m_isRoleVisible: boolean = false;
    m_isUpdatePwdVisible: boolean = false;
    m_objSubtab: Array<Subtab> = [];
    m_objUser: User = new User();
    m_lsFuncRoleList: Array<Check> = [];
    m_lsDataRoleList: Array<Check> = [];
    m_objRemoveUserCondition: RemoveUserCondition = new RemoveUserCondition();
    m_objUpdateUserCondition: UpdateUserCondition = new UpdateUserCondition();
    m_objUpdataRoleCondition: UpdataRoleCondition = new UpdataRoleCondition();
    m_objSearchUserCondition: SearchCondition<SearchUserCondition> = new SearchCondition<SearchUserCondition>(SearchUserCondition);
    constructor(
        public m_objSysService: SystemManagementService,
        public m_objApiService: ApiService,
        private m_objMessage: NzMessageService,
        private m_objModalService: NzModalService,
        private m_objContextService: ContextService
    ) {}

    ngOnInit() {
        this.m_nMustUserID = this.m_objContextService.m_objUserInfo.UserID;
        this.m_sUserName = this.m_objContextService.m_objUserInfo.UserName;
        if(this.m_objContextService.m_nUserID == 0 || !this.m_objContextService.m_nUserID){
            this.m_nUserID = this.m_nMustUserID;
        }else{
            this.m_nUserID = this.m_objContextService.m_nUserID;
        }
        this.m_objRemoveUserCondition.nRemoveUserIDMust = this.m_nMustUserID;
        this.m_objRemoveUserCondition.sRemoveUserNameMust = this.m_sUserName;
        this.m_objUpdataRoleCondition.nUpdateUserIDMust = this.m_nMustUserID;
        this.m_objUpdataRoleCondition.sUpdateUserNameMust = this.m_sUserName;
        this.m_objUpdateUserCondition.nUpdateUserIDMust = this.m_nMustUserID;
        this.m_objUpdateUserCondition.sUpdateUserNameMust = this.m_sUserName;
        this.m_objSearchUserCondition.objPageInfo.nPageNo = 1;
        this.m_objSearchUserCondition.objPageInfo.nPageSize = 1;
        this.m_objSubtab = this.m_objSysService.m_objSubtab;
        this.fnGetUser();
    }

    /**查询用户列表 */
    fnGetUser(): void {
        this.m_objSearchUserCondition.objCondition.nSearchUserIDMust = this.m_nMustUserID;
        this.m_objSearchUserCondition.objCondition.sSearchUserNameMust = this.m_sUserName;
        this.m_objSearchUserCondition.objCondition.nUserID = this.m_nUserID;
        this.m_objApiService
            .fnSearchUserList(this.m_objSearchUserCondition)
            .subscribe(data => {
                if (data.Code === 200) {
                    this.m_objUser = data.Data.DataSet[0];
                } else {
                    this.m_objMessage.create("error", data.Msg);
                }
            });
    }

    /**更改用户资料 */
    fnUpdateUser(): void {
        this.m_objUpdateUserCondition.nUserID = this.m_nUserID;
        this.m_objApiService
            .fnUpdateUser(this.m_objUpdateUserCondition)
            .subscribe(data => {
                if (data.Code === 200) {
                    this.m_isEditVisible = false;
                    this.m_objMessage.create("success", "修改资料成功！");
                } else {
                    this.m_objMessage.create("error", "修改资料失败！");
                }
            });
    }

    /**获取功能权限列表 */
    fnGetFuncRoleList(): void {        
        this.m_objApiService.fnGetFuncRoleList(this.m_objUpdataRoleCondition).subscribe(data => {
            if(data.Code === 200 && data.Data.length) {
                this.m_lsFuncRoleList = [];
                data.Data.forEach(item => {
                    let objRole: Check = new Check();
                    objRole.label = item.RoleName;
                    objRole.value = item.RoleID;
                    this.m_lsFuncRoleList.push(objRole);
                });
            }
        })
    }

    /**权限编辑 */
    fnUpdateRole(): void {
        this.m_objUpdataRoleCondition.nUserID = this.m_nUserID;
        if(this.m_lsFuncRoleList) {
            this.m_objUpdataRoleCondition.sRoleList = this.m_sFuncRoleList;
        }
        if(this.m_sDataRoleList) {
            this.m_objUpdataRoleCondition.sUserDataRoleList = this.m_sDataRoleList;
        }
        this.m_objApiService.fnUpdateRole(this.m_objUpdataRoleCondition).subscribe(data => {
            if(data.Code === 200) {
                this.m_objMessage.create("success", "权限编辑成功！");
                this.m_isRoleVisible = false;
            }else{
                if(data.Msg != '') {
                    this.m_objMessage.create("error", data.Msg);
                }else{
                    this.m_objMessage.create("error", "权限编辑失败！");
                }
            }
        })
    }

    /**获取数据权限 */
    fnGetDataRoleList(): void {
        this.m_objApiService.fnGetDataRoleList(this.m_objUpdataRoleCondition).subscribe(data => {
            if(data.Code === 200 && data.Data.DataSet) {
                this.m_lsDataRoleList = [];
                data.Data.DataSet.forEach(item => {
                    let objDataRole: Check = new Check();
                    objDataRole.label = item.Fields;
                    objDataRole.value = item.UserDataRoleID;
                    this.m_lsDataRoleList.push(objDataRole);
                });
            }
        })
    }

    /**修改用户密码 */
    fnUpdatePassword(): void {  
        this.m_objUpdateUserCondition.nUserID = this.m_nUserID;
        if (this.m_sNewPassword == this.m_objUpdateUserCondition.sNewPassword) {
            this.m_objApiService
                .fnUpdatePassword(this.m_objUpdateUserCondition)
                .subscribe(data => {
                    if (data.Code === 200) {
                        this.m_objMessage.create("success", "密码修改成功！");
                        this.m_isUpdatePwdVisible = false;
                    } else {
                        this.m_objMessage.create("error", "密码修改失败！");
                    }
                });
        } else {
            this.m_objMessage.create("error", "新密码不一致！");
        }
    }

    /**更改用户状态，1:恢复、2:禁用 */
    fnUpdateUserState(nState: number): void {
        this.m_objUpdateUserCondition.nUserID = this.m_nUserID;
        this.m_objUpdateUserCondition.sRemark = "修改用户状态";
        this.m_objUpdateUserCondition.nState = nState;
        this.m_objApiService
            .fnUpdateUserState(this.m_objUpdateUserCondition)
            .subscribe(data => {
                if (data.Code === 200) {
                    this.m_nBtnState = 1;
                    this.m_objMessage.create("info", "操作成功！");
                } else {
                    this.m_objMessage.create("error", "操作失败！");
                }
            });
    }

    /**关闭账户 */
    fnRemoveUser(): void {
        this.m_objRemoveUserCondition.nUserID = this.m_nUserID;
        this.m_objRemoveUserCondition.sRemark = "关闭用户";
        this.m_objApiService
            .fnRemoveUser(this.m_objRemoveUserCondition)
            .subscribe(data => {
                if (data.Code === 200) {
                    this.m_nBtnState = 2;
                    this.m_objMessage.create("info", "账户关闭成功！");
                } else {
                    this.m_objMessage.create("error", "操作失败！");
                }
            });
    }

    /**禁用账户弹窗 */
    fnShowForbidConfirm(): void {
        this.m_objModalService.confirm({
            nzTitle: "提示",
            nzContent: "确定禁用该账户？",
            nzOnOk: () => this.fnUpdateUserState(2)
        });
    }

    /**恢复账户弹窗 */
    fnShowRecoveryConfirm(): void {
        this.m_objModalService.confirm({
            nzTitle: "提示",
            nzContent: "确定恢复账户使用？",
            nzOnOk: () => this.fnUpdateUserState(1)
        });
    }

    /**关闭账户弹窗 */
    fnShowRemoveConfirm(): void {
        this.m_objModalService.confirm({
            nzTitle: "提示",
            nzContent: "确定关闭该账户？",
            nzOnOk: () => this.fnRemoveUser()
        });
    }

    /**显示弹窗, 1：编辑弹窗、2：权限修改弹窗、3：修改密码弹窗 */
    fnShowModal(nVisiable: number): void {
        this.m_isVisible = true;
        this.m_nVisible = nVisiable;
        switch (this.m_nVisible) {
            case 1:
                this.m_isEditVisible = true;
                break;
            case 2:
                this.m_isRoleVisible = true;
                this.fnGetFuncRoleList();
                this.fnGetDataRoleList();
                break;
            case 3:
                this.m_isUpdatePwdVisible = true;
                break;
            default:
                this.m_isEditVisible = false;
                this.m_isRoleVisible = false;
                this.m_isUpdatePwdVisible = false;
                break;
        }
    }

    /**关闭弹窗 */
    fnHandleCancel(): void {
        this.m_isVisible = true;
        this.m_nVisible = 0;
        this.m_isEditVisible = false;
        this.m_isRoleVisible = false;
        this.m_isUpdatePwdVisible = false;
    }

    /**生成选中的权限id列表,nRoleID 1:FuncRole,2:DataRole */
    fnHandleRole(lsRoleList: Array<Check>, nRoleID: number): void {
        let lsRole: Array<number> = [];                                                                                                                                                            
        if(lsRoleList.length) {
            lsRoleList.forEach(item => {
                if(item.checked === true){
                    lsRole.push(item.value);
                }
            })
            if(nRoleID === 1) {
                this.m_sFuncRoleList = "[" + String(lsRole) + ']';
            }else{
                this.m_sDataRoleList = "[" + String(lsRole) + ']';
            }
        }
    }
}
