# coding: utf-8

import web

from core.modules.module_handle import api_handle
from libs.orm.ormutils import dbtranscoped
from models.hps.u_user import User
from utils.func_api import FuncResult
from utils.tools import is_null
from utils import obj_to_json


class handler(object):
    @api_handle(db=True)
    def POST(self):
        return self.data_handle()

    @dbtranscoped()
    def data_handle(self):
        '''
        获取请求参数
        '''
        obj_input = web.input()
        try:
            nUpdateUserIDMust = obj_input.get('nUpdateUserIDMust')
            sUpdateUserNameMust = obj_input.get('sUpdateUserNameMust')
            nUserID = obj_input.get('nUserID')
            sRemark = obj_input.get('sRemark')
            int_state = int(obj_input.get('nState'))
            if is_null(nUpdateUserIDMust) :
                return FuncResult(fail='参数\'nUpdateUserIDMust\'不能为空')
            elif is_null(sUpdateUserNameMust) :
                return FuncResult(fail='参数\'sUpdateUserNameMust\'不能为空')
            elif is_null(nUserID) :
                return FuncResult(fail='参数\'nUserID\'不能为空')
            elif is_null(int_state) :
                return FuncResult(fail='参数\'nState\'不能为空')

        except Exception, ce:
            # 异常处理
            return FuncResult(fail='参数有误！')

        return self.add_user(nUserID, sRemark, int_state)

    def add_user(self, nUserID, sRemark, int_state):
        obj_user = User().query.filter(User.UserID == nUserID)\
                                .first()
        if obj_user:
            # 修改密码
            obj_user.State = int_state
            # if not is_null(sRemark):
            #     obj_user.Remark = sRemark
            # 保存更改到数据库
            obj_user.save()
            if int_state == 1:
                return FuncResult(success=True, msg='恢复账户成功！')
            else:
                return FuncResult(success=True, msg='禁用账户成功！')
        else:
            return FuncResult(fail='该用户编号不存在！')
