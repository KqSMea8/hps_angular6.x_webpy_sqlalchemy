import { Component, OnInit } from '@angular/core';
import { SystemManagementService } from 'src/app/services/system-management.service';
import { ContextService } from 'src/app/services/context.service';
import { ApiService } from 'src/app/services/api.service';
import { NzModalService, NzMessageService } from 'ng-zorro-antd';
import { UpdateDict } from 'src/app/class/updateDict';
import { AddDict } from 'src/app/class/addDict';
import { Dict } from 'src/app/class/dictionary';
import { UpdateState } from 'src/app/class/updateState';
import { City } from 'src/app/class/City';

@Component({
    selector: 'app-parameter-config',
    templateUrl: './parameter-config.component.html',
    styleUrls: ['./parameter-config.component.less']
})
export class ParameterConfigComponent implements OnInit {
    m_objHaveData: any = [0];
    m_lsDomestic: any[] = [];
    /**面包屑导航信息 */
    m_lsBreadCrumbList: Array<{ name: string, routelink: string }> = [
        { name: '首页', routelink: '/main' },
        { name: '参数配置', routelink: '' },
    ];
    /**0、境内证件 1、境外证件 2、旅店类型 3、省份 4、市 5、区域 */
    m_nIsShowTypeID: number;
    m_lsIsShow = [false, false, false, false, false];
    m_lsIsShowAdd = [false, false, false, false, false];
    m_objUpdateDict: UpdateDict = new UpdateDict();
    m_objAddDict: AddDict = new AddDict();
    m_objUpdateArea: UpdateState = new UpdateState();
    m_lsCurrentCityListOfCity: City[] = [];
    /**显示省市两联动 */
    m_lsIsShowProvinceType: boolean[] = [true];
    /**显示省市区三联动 */
    m_lsIsShowAreaType: boolean[] = [true, true];
    /**按钮上的加载动画 */
    m_bIsOkLoading: boolean;
    /**加载动画 */
    m_bShowLoading: boolean;
    /**配置表列表 */
    m_lsConfigList;
    m_bShowConfigList: boolean;
    constructor(
        public m_objSystemManagementService: SystemManagementService,
        public m_objContextService: ContextService,
        private m_objApiService: ApiService,
        private m_objModalService: NzModalService,
        private m_objMessageService: NzMessageService
    ) { }

    ngOnInit() {
        this.m_objUpdateArea.nUpdateUserIDMust = this.m_objAddDict.nAddUserIDMust = this.m_objUpdateDict.nUpdateUserIDMust
            = this.m_objContextService.m_objUserInfo.UserID;
        this.m_objUpdateArea.sUpdateUserNameMust = this.m_objAddDict.sAddUserNameMust = this.m_objUpdateDict.sUpdateUserNameMust
            = this.m_objContextService.m_objUserInfo.UserName;
    }
    /**获取当前选中的城市列表 */
    fnGetCurrentProvince(lsCurrentCityList: City[]): void {
        this.m_lsCurrentCityListOfCity = lsCurrentCityList;
    }
    /**显示参数配置列表 */
    fnShowSwitchList(): void {
        this.m_bShowConfigList = !this.m_bShowConfigList;
    }

    /**切换配置列表 */
    fnSwitchConfigType(nTypeID: number): void {
        this.m_nIsShowTypeID = nTypeID;
    }

    /**新增字典类型API */
    fnAddDict(nCodeType): void {
        this.m_bIsOkLoading = true;
        let sTypeName: string;
        /**0、境内证件 1、境外证件 2、旅店类型 3、省份 4、市 5、区域 */
        switch (nCodeType) {
            case 0:
                sTypeName = 'doc_type';
                break;
            case 1:
                sTypeName = 'foreigner_doc';
                break;
            case 2:
                sTypeName = 'hotel_type';
                break;
        }
        this.m_objAddDict.nCodeType = Dict[sTypeName];
        this.m_objAddDict.sTypeName = sTypeName;

        this.m_objApiService.fnAddDict(this.m_objAddDict).subscribe(data => {
            this.m_bIsOkLoading = false;
            if (data.Code === 200) {
                this.fnUpdateContextDict(sTypeName);
                this.m_objMessageService.success('新增成功');
                /**关闭所有新增弹窗 */
                for (let i = 0; i < this.m_lsIsShowAdd.length; i++) {
                    this.m_lsIsShowAdd[i] = false;
                }
                this.m_objAddDict.sCodeName = '';
            } else {
                this.m_objMessageService.error(data.Msg);
            }
        });
    }

    /**保存国内证件类型修改 */
    fnUpdate(nOperaNo?: number): void {
        this.m_bIsOkLoading = true;
        let sMsg: string;
        let bHidePop: boolean;
        // 1代表类型状态修改
        if (nOperaNo === 1) {
            this.m_objUpdateDict.nFlag === 1 ? this.m_objUpdateDict.nFlag = 2 : this.m_objUpdateDict.nFlag = 1;
            sMsg = this.m_objUpdateDict.nFlag === 1 ? '启用成功' : '禁用成功';
        } else if (nOperaNo === 2) {
            this.m_objUpdateDict.nFlag = 0;
            sMsg = '删除成功';
        } else {
            sMsg = '操作成功！';
            bHidePop = true;
        }
        this.m_objApiService.fnUpdateDict(this.m_objUpdateDict).subscribe(data => {
            this.m_bIsOkLoading = false;
            if (data.Code === 200) {
                this.fnUpdateContextDict('doc_type');
                this.m_objMessageService.success(sMsg);
                if (bHidePop) {
                    /**关闭所有修改弹窗 */
                    for (let i = 0; i < this.m_lsIsShow.length; i++) {
                        this.m_lsIsShow[i] = false;
                    }
                }
            } else {
                this.m_objMessageService.error(data.Msg);
            }
        });
    }

    /**保存省市区有效状态修改 */
    fnUpdateAreaState(nOperaNo: number): void {
        this.m_bIsOkLoading = true;
        let sMsg: string;
        let bHidePop: boolean;
        // 1代表类型状态修改
        if (nOperaNo === 1) {
            this.m_objUpdateArea.nFlag === 1 ? this.m_objUpdateArea.nFlag = 2 : this.m_objUpdateArea.nFlag = 1;
            sMsg = this.m_objUpdateArea.nFlag === 1 ? '启用成功' : '禁用成功';
        } else if (nOperaNo === 2) {
            this.m_objUpdateArea.nFlag = 0;
            sMsg = '删除成功';
        } else {
            sMsg = '操作成功！';
            bHidePop = true;
        }
        this.m_objApiService.fnUpdateState(this.m_objUpdateArea).subscribe(data => {
            this.m_bIsOkLoading = false;
            if (data.Code === 200) {
                this.m_objContextService.fnGetProvince();
                this.m_objMessageService.success(sMsg);
                if (bHidePop) {
                    /**关闭所有修改弹窗 */
                    for (let i = 0; i < this.m_lsIsShow.length; i++) {
                        this.m_lsIsShow[i] = false;
                    }
                }
            } else {
                this.m_objMessageService.error(data.Msg);
            }
        });
    }

    /**修改APi弹窗 */
    fnModifyPop(nCodeType: number, objItem: any): void {
        // .CodeID, item.CodeName, item.Flag
        // 3以下是一个接口，3以上是另外一个接口
        if (nCodeType < 3) {
            this.fnUpdateValue(objItem);
            this.fnShowHidePop(nCodeType);
        } else {
            this.fnUpdateAreaValue(3, objItem);
        }
    }

    /**更改状态Api弹窗 */
    fnUpdateStatePop(objItem: any): void {
        this.fnUpdateValue(objItem);
        this.fnShowRemoveConfirm(`您确定要${this.m_objUpdateDict.nFlag === 1 ? '禁用' : '启用'} [${this.m_objUpdateDict.sCodeName}] 吗？`,
            this.fnUpdate, 1);
    }

    /**更改省市区状态Api弹窗 */
    fnUpdateAreaStatePop(nTypeID: number,  objItem: any): void {
        this.m_objUpdateArea.sProvince = objItem.Province;
        this.m_objUpdateArea.sCityName = objItem.CityName;
        this.m_objUpdateArea.sDistrictName = objItem.DistrictName;
        this.m_objUpdateArea.nFlag = objItem.IsFlag;
        this.fnUpdateAreaValue(nTypeID, objItem);
        this.m_objUpdateArea.nUpdateType = nTypeID;
        switch (nTypeID) {
            case 1:
                this.fnShowRemoveConfirm(`您确定要${this.m_objUpdateArea.nFlag === 1 ? '禁用' : '启用'} [${this.m_objUpdateArea.sProvince}] 吗？`,
                this.fnUpdateAreaState, 1);
                break;
            case 2:
                this.fnShowRemoveConfirm(`您确定要${this.m_objUpdateArea.nFlag === 1 ? '禁用' : '启用'} [${this.m_objUpdateArea.sCityName}] 吗？`,
                this.fnUpdateAreaState, 1);
                break;
            case 3:
                this.fnShowRemoveConfirm(`您确定要${this.m_objUpdateArea.nFlag === 1 ? '禁用' : '启用'} [${this.m_objUpdateArea.sDistrictName}] 吗？`,
                this.fnUpdateAreaState, 1);
                break;
        }
    }

    /**删除类型API弹窗 */
    fnRemovePop(objItem: any): void {
        this.fnUpdateValue(objItem);
        this.fnShowRemoveConfirm(`您确定要删除 [${this.m_objUpdateDict.sCodeName}] 吗？`,
            this.fnUpdate, 1);
    }

    /**弹窗 */
    fnShowRemoveConfirm(sContent: string, fnCallback: any, nOperaNo: number): void {
        const self = this;
        this.m_objModalService.confirm({
            nzTitle: '提示',
            nzContent: sContent,
            nzOnOk: () => {
                fnCallback.call(self, nOperaNo);
            }
        });
    }

    /**更新当前选中的值 */
    fnUpdateValue(objItem: any): void {
        this.m_objUpdateDict.nCodeID = objItem.CodeID;
        this.m_objUpdateDict.sCodeName = objItem.CodeName;
        this.m_objUpdateDict.nFlag = objItem.Flag;
    }

    /**更新当前选中的省市区的值 */
    fnUpdateAreaValue(nTypeID: number, objItem: any): void {
        switch (nTypeID) {
            case 1:
                this.m_objUpdateArea.nProvinceID = objItem.ProvinceID;
                this.m_objUpdateArea.nUpdateType = nTypeID;
                this.m_objUpdateArea.nFlag = objItem.IsFlag;
        }
    }

    /**显示与关闭编辑弹窗 */
    fnShowHidePop(nIndex: number): void {
        this.m_bIsOkLoading = false;
        this.m_lsIsShow[nIndex] = !this.m_lsIsShow[nIndex];
    }

    /**显示与关闭新增弹窗 */
    fnShowHideAddPop(nIndex: number): void {
        this.m_bIsOkLoading = false;
        this.m_lsIsShowAdd[nIndex] = !this.m_lsIsShowAdd[nIndex];
    }


    /**同步更新上下文的字典表 */
    fnUpdateContextDict(sName: string): void {
        this.m_bShowLoading = true;
        this.m_objContextService.fnGetDict(() => {
            this.m_bShowLoading = false;
        });

        // 前端本地更新字典表
        // if (bIsAdd) {
        //     this.m_objContextService.m_objAllDict[sName].push({
        //         CodeID: this.m_objAddDict.nCodeID
        //     });
        // }
        // const nLenth = this.m_objContextService.m_objAllDict[sName].length;
        // for (let i = 0; i < nLenth; i++) {
        //     if (this.m_objContextService.m_objAllDict[sName][i].CodeID === this.m_objUpdateDict.nCodeID) {
        //         /**如果已被删除则从上下文中删除 */
        //         if (this.m_objUpdateDict.nFlag === 0) {
        //             this.m_objContextService.m_objAllDict[sName].splice(i, 1);
        //             return;
        //         }
        //         this.m_objContextService.m_objAllDict[sName][i].CodeID = this.m_objUpdateDict.nCodeID;
        //         this.m_objContextService.m_objAllDict[sName][i].CodeName = this.m_objUpdateDict.sCodeName;
        //         this.m_objContextService.m_objAllDict[sName][i].Flag = this.m_objUpdateDict.nFlag;
        //         return;
        //     }
        // }
    }

    /**同步更新上下文的省市区 */
}
